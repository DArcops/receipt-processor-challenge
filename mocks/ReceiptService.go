// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/darcops/receipt-proccessor-challenge/internal/pkg/entity"
	mock "github.com/stretchr/testify/mock"
)

// ReceiptService is an autogenerated mock type for the ReceiptService type
type ReceiptService struct {
	mock.Mock
}

// CreateReceiptID provides a mock function with given fields: ctx
func (_m *ReceiptService) CreateReceiptID(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetReceiptPoints provides a mock function with given fields: ctx, receipt
func (_m *ReceiptService) GetReceiptPoints(ctx context.Context, receipt entity.Receipt) (int64, error) {
	ret := _m.Called(ctx, receipt)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Receipt) (int64, error)); ok {
		return rf(ctx, receipt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Receipt) int64); ok {
		r0 = rf(ctx, receipt)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Receipt) error); ok {
		r1 = rf(ctx, receipt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReceiptService creates a new instance of ReceiptService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceiptService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceiptService {
	mock := &ReceiptService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
